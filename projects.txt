Project details

Deliverables:
-------------
1. A working demo on a test blockchain, using Ganache or some other app (or command-line utility) that can display blockchain details. 

2. The Truffle project folder. The project should have the Solidity contracts, and also Javascript code to deploy the contracts and Javascript code that performs transactions on the deployed contracts. 

3. A write-up on the project. 

Deadlines:
----------
1. December 11 night for the code and write-up. 
2. Online presentation to be scheduled on December 12 or later. 

We propose two projects, which you can work on in two groups of five members each. If some of you have another project idea, you can inform us and form three groups. 

Sample project: 
---------------
I am uploading a sample Truffle folder of a sample fundraiser project.  

Project 1: Property ownership 
-----------------------------
Implement a contract which maintains a property database. A designated authority can create new property which is a structure that stores location data and area of the property, say. You are free to implement this in any reasonable manner. We only insist that each property has an associated owner at the time of creation. The owners have the power to transfer the property to others. It is also possible to split a property into pieces and transfer ownership to multiple people. The owner of the property is the only one who can do this. Your contract should also support querying the database, to find out the owner of a property, or the list of all properties owned by someone. 

Project 2: Turn-based game on the blockchain 
--------------------------------------------
Implement a simple turn-based game on the blockchain. 

A very simplistic game we thought of was antakshari. The first player submits a word. At each subsequent turn, players should submit a word which begins with the last letter of the previous word. Words must be valid, which will be checked by making calls to a dictionary maintained by some trusted source outside the blockchain, say. You can introduce timing constraints, and allow people to pass when it is their turn. You can add elimination criteria, like number of times a player has passed their chance. You can add appropriate termination and winning criteria (specified number of rounds, accumulate points and declare winner based on that). 

You would have one contract implementing each instance of the above game, initialised with a set of players, and other parameters like number of rounds. You would have another contract that will spawn one game contract whenever a group of users want to play a game. (In the sample fundraiser project, there is a Fudraiser contract and a FundraiserFactory contract.)

--------------

You are free to come up with variations of the above specs ... as long as it is coherent. 

